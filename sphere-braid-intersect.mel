//Intersect braid with sphere

//For each curve
select leftStrand;
//Parameterize curve with 150 segments
rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 1 -s 150 -d 1 -tol 0.01 "leftStrand";
//Check for line-sphere intersection
//Sphere center
float $cx = 0;
float $cy = 1.5;
float $cz = 0;
float $radius = 0.2;

float $px = 0;
float $py = 0;
float $pz = 0;

for ($i = 0; $i < 151; $i++){
//Line origin
float $begin[] = `pointPosition -w leftStrand.cv[$i]`;
float $ex = $begin[0];
float $ey = $begin[1];
float $ez = $begin[2];
//Direction of line
float $end[] = `pointPosition -w leftStrand.cv[($i)+1]`;
float $dx = ($end[0])-$ex;
float $dy = ($end[1])-$ey;
float $dz = ($end[2])-$ez;

float $A = $dx*$dx + $dy*$dy + $dz*$dz;
float $B = 2.0*($dx*($ex-$cx)+$dy*($ey-$cy)+$dz*($ez-$cz));
float $C = ($ex-$cx)*($ex-$cx)+($ey-$cy)*($ey-$cy)+($ez-$cz)*($ez-$cz) - $radius*$radius;

//this test is useless because all curves will be starting inside the sphere
//float $determinant = $B*$B-4.0*$A*$C;
//if ($determinant < 0)
//    print "NOPE";

float $t1num = -$B + sqrt(pow($B,2)-4.0*$A*$C);
float $t2num = -$B - sqrt(pow($B,2)-4.0*$A*$C);
float $denom = 1.0/(2.0*$A);
float $t1 = $t1num*$denom;
float $t2 = $t2num*$denom;

$px = $ex + ($dx*$t1);
$py = $ey + ($dy*$t1);
$pz = $ez + ($dz*$t1);

//If intersection point is within the line segment, we're done
if (sqrt(pow(($px-$ex),2)+pow(($py-$ey),2)+pow(($pz-$ez),2)) <= sqrt($dx*$dx+$dy*$dy+$dz*$dz))
    break;  
}

select leftStrand;
closestPointOn (1, 1);
select cpConstraintIn;
move $px $py $pz;
getAttr nearestPointOnCurve1.px;
float $parameter = `getAttr nearestPointOnCurve1.parameter`;
select leftStrand.u[$parameter];
